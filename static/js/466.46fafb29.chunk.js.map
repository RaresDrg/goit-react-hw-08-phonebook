{"version":3,"file":"static/js/466.46fafb29.chunk.js","mappings":"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","sources":["../node_modules/nanoid/url-alphabet/index.js","components/common/InputField/InputField.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/common/SubmitBtn/SubmitBtn.module.css?ecdf","components/common/SubmitBtn/SubmitBtn.jsx","redux/contacts/selectors.js","hooks/useContacts.js","components/Phonebook/Phonebook.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactsPage.module.css?0a45","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/FilterContactsInput/FilterContactsInput.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/AbsentContactsNotification/AbsentContactsNotification.module.css?9151","components/AbsentContactsNotification/AbsentContactsNotification.jsx","components/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/common/LoadingSpinner/LoadingSpinner.module.css?9fb6","components/common/LoadingSpinner/Loader.jsx","webpack://react-homework-template/./src/components/common/ErrorAlert/ErrorAlert.module.css?5ee0","components/common/ErrorAlert/ErrorAlert.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage/ContactsPage.jsx","pages/ContactsPage/RestrictedContactsPage/RestrictedContactsPage.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02"],"sourcesContent":["export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nconst InputField = ({ type, name, pattern, title }) => {\n  const inputId = nanoid();\n\n  return (\n    <>\n      <label htmlFor={inputId}>{name}</label>\n      <input\n        type={type}\n        name={name}\n        id={inputId}\n        pattern={pattern || null}\n        title={title || null}\n        autoComplete=\"on\"\n        required\n      />\n    </>\n  );\n};\n\nInputField.propTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default InputField;\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"submitBtn\":\"SubmitBtn_submitBtn__4n7HF\"};","import PropTypes from 'prop-types';\nimport styles from './SubmitBtn.module.css';\n\nconst SubmitBtn = ({ text }) => {\n  return (\n    <button className={styles.submitBtn} type=\"submit\">\n      {text}\n    </button>\n  );\n};\n\nSubmitBtn.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default SubmitBtn;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectIsLoading = state => state.contacts.isLoading;\nconst selectError = state => state.contacts.error;\nconst selectFilter = state => state.contacts.filter;\nconst selectContacts = state => state.contacts.items;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(item =>\n      item.name.toUpperCase().includes(filter.toUpperCase())\n    );\n  }\n);\n\nexport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n  selectFilter,\n  selectFilteredContacts,\n};\n","import { useSelector } from 'react-redux';\nimport {\n  selectIsLoading,\n  selectError,\n  selectContacts,\n  selectFilter,\n  selectFilteredContacts,\n} from '../redux/contacts/selectors';\n\nconst useContacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return { isLoading, error, contacts, filter, filteredContacts };\n};\n\nexport default useContacts;\n","import styles from './Phonebook.module.css';\n\nimport InputField from 'components/common/InputField/InputField';\nimport SubmitBtn from 'components/common/SubmitBtn/SubmitBtn';\n\nimport { useDispatch } from 'react-redux';\nimport useContacts from 'hooks/useContacts';\nimport { addContact } from '../../redux/contacts/operations';\nimport { setFilter } from '../../redux/contacts/slice';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n\n  const { contacts } = useContacts();\n\n  const checkExistence = name => {\n    return contacts.find(\n      item => item.name.toUpperCase() === name.toUpperCase()\n    );\n  };\n\n  const formatNumber = number => {\n    const formatedNumber = number.padEnd(10, '9').split('');\n\n    formatedNumber.length > 10 &&\n      formatedNumber.splice(10, formatedNumber.length);\n\n    formatedNumber.splice(3, 0, '-');\n    formatedNumber.splice(7, 0, '-');\n\n    return formatedNumber.join('');\n  };\n\n  const capitalize = text => {\n    return text\n      .split(' ')\n      .map(\n        word =>\n          word.charAt(0).toUpperCase() +\n          word.slice(1, word.length).toLowerCase()\n      )\n      .join(' ');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    const name = capitalize(form.elements.name.value.trim());\n    const number = formatNumber(form.elements.number.value.trim());\n\n    checkExistence(name)\n      ? alert(`\"${name}\" is already in contacts`)\n      : dispatch(addContact({ name, number })) && dispatch(setFilter(''));\n\n    form.reset();\n  };\n\n  return (\n    <div className={styles.phonebook}>\n      <h2>Phonebook</h2>\n\n      <form onSubmit={handleSubmit}>\n        <InputField\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        />\n        <InputField\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        />\n\n        <SubmitBtn text=\"Add contact\" />\n      </form>\n    </div>\n  );\n};\n\nexport default Phonebook;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactsPage_contacts__m3nnh\"};","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"Contacts_contacts__Eg+6p\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/slice';\n\nimport useContacts from 'hooks/useContacts';\n\nconst FilterContactsInput = () => {\n  const dispatch = useDispatch();\n\n  const { filter } = useContacts();\n\n  const handleInputChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <>\n      <label htmlFor=\"filterInputId\">Find contacts by name</label>\n      <input\n        onChange={handleInputChange}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        id=\"filterInputId\"\n        autoComplete=\"off\"\n        pattern=\"^[a-zA-Z]+(([' \\-][a-zA-Z ])?[a-zA-Z]*)*\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </>\n  );\n};\n\nexport default FilterContactsInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    const userConfirmation = window.confirm(\n      `Delete \"${contact.name}\" from yout list ?`\n    );\n\n    userConfirmation && dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <li>\n      <span>{contact.name}</span>: <span>{contact.number}</span>\n      <button onClick={handleClick} type=\"button\">\n        X\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.object.isRequired,\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"AbsentContactsNotification_notification__sX203\"};","import styles from './AbsentContactsNotification.module.css';\n\nimport useContacts from 'hooks/useContacts';\n\nconst AbsentContactsNotification = () => {\n  const { filter: searchedContact } = useContacts();\n\n  return (\n    <>\n      <p className={styles.notification}>\n        {searchedContact === ''\n          ? \"You haven't saved any contacts yet\"\n          : ` \" ${searchedContact} \" is not saved in your contacts list`}\n      </p>\n    </>\n  );\n};\n\nexport default AbsentContactsNotification;\n","import styles from './ContactsList.module.css';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport AbsentContactsNotification from 'components/AbsentContactsNotification/AbsentContactsNotification';\n\nimport useContacts from 'hooks/useContacts';\n\nconst ContactsList = () => {\n  const { filteredContacts } = useContacts();\n\n  if (filteredContacts.length === 0) {\n    return <AbsentContactsNotification />;\n  }\n\n  return (\n    <ul className={styles.contactsList}>\n      {filteredContacts.map(item => (\n        <ContactItem key={item.id} contact={item} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"loadingSpinner\":\"LoadingSpinner_loadingSpinner__mZzDZ\"};","import { ThreeDots } from 'react-loader-spinner';\nimport styles from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return (\n    <ThreeDots\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      color=\"#4fa94d\"\n      radius=\"9\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperClass={styles.loadingSpinner}\n    />\n  );\n};\n\nexport default LoadingSpinner;\n","// extracted by mini-css-extract-plugin\nexport default {\"Error\":\"ErrorAlert_Error__rwsaJ\"};","import PropTypes from 'prop-types';\nimport styles from './ErrorAlert.module.css';\n\nconst ErrorAlert = ({ error }) => {\n  return <p className={styles.Error}>{error}</p>;\n};\n\nErrorAlert.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n\nexport default ErrorAlert;\n","import styles from './Contacts.module.css';\n\nimport FilterContactsInput from 'components/FilterContactsInput/FilterContactsInput';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport LoadingSpinner from 'components/common/LoadingSpinner/Loader';\nimport ErrorAlert from 'components/common/ErrorAlert/ErrorAlert';\n\nimport useContacts from 'hooks/useContacts';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const { isLoading, error } = useContacts();\n  const Error_Message = `The contact list cannot be loaded due to the following error: ${error} `;\n\n  return (\n    <div className={styles.contacts}>\n      <h2>Contacts</h2>\n      <FilterContactsInput />\n\n      {isLoading && <LoadingSpinner />}\n      {error && <ErrorAlert error={Error_Message} />}\n      {!isLoading && !error && <ContactsList />}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import Phonebook from 'components/Phonebook/Phonebook';\nimport styles from './ContactsPage.module.css';\nimport Contacts from 'components/Contacts/Contacts';\n\nconst ContactsPage = () => {\n  return (\n    <section className={styles.contacts}>\n      <Phonebook />\n      <Contacts />\n    </section>\n  );\n};\n\nexport default ContactsPage;\n","import { Navigate } from 'react-router-dom';\nimport useAuth from '../../../hooks/useAuth';\nimport ContactsPage from '../ContactsPage';\n\nconst RestrictedContactsPage = () => {\n  const { isLoggedIn } = useAuth();\n\n  if (!isLoggedIn) {\n    return <Navigate to={'/login'} />;\n  }\n\n  return <ContactsPage />;\n};\n\nexport default RestrictedContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"Phonebook_phonebook__A8MMG\",\"authSection\":\"Phonebook_authSection__5PUBC\"};"],"names":["urlAlphabet","_ref","type","name","pattern","title","inputId","size","arguments","length","undefined","id","bytes","crypto","getRandomValues","Uint8Array","nanoid","_jsxs","_Fragment","children","_jsx","htmlFor","autoComplete","required","text","className","styles","selectIsLoading","state","contacts","isLoading","selectError","error","selectFilter","filter","selectContacts","items","selectFilteredContacts","createSelector","item","toUpperCase","includes","useSelector","filteredContacts","dispatch","useDispatch","useContacts","onSubmit","event","preventDefault","form","target","elements","value","trim","split","map","word","charAt","slice","toLowerCase","join","number","formatedNumber","padEnd","splice","formatNumber","find","checkExistence","addContact","setFilter","alert","concat","reset","InputField","SubmitBtn","onChange","contact","onClick","window","confirm","deleteContact","searchedContact","AbsentContactsNotification","ContactItem","ThreeDots","visible","height","width","color","radius","ariaLabel","wrapperClass","useEffect","fetchContacts","_useContacts","Error_Message","FilterContactsInput","LoadingSpinner","ErrorAlert","ContactsList","Phonebook","Contacts","useAuth","isLoggedIn","ContactsPage","Navigate","to"],"sourceRoot":""}